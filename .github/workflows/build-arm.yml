on:
  push:
    tags:
      - 'v*'
name: Create release and build binaries
jobs:
  armv7_job:
    runs-on: [self-hosted, Linux, ARM]
    name: Build armv7l 
    steps:
      - uses: actions/checkout@v2.1.0
      - uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - run: npm run fetch-libsodium
      - run: npm install
      - run: npm run prebuild
      - uses: actions/upload-artifact@v2
        with:
          name: linux-armv7l
          path: ./prebuilds
  aarch64_job:
    runs-on: [self-hosted, Linux, ARM64]
    name: Build aarch64 
    steps:
      - uses: actions/checkout@v2.1.0
      - uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - run: npm run fetch-libsodium
      - run: npm install
      - run: npm run prebuild
      - uses: actions/upload-artifact@v2
        with:
          name: linux-aarch64
          path: ./prebuilds
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [armv7_job]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get builds
        uses: actions/download-artifact@v2
        with:
          path: prebuilds
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: 'Release Notes and changelog'
          draft: true 
          prerelease: false
      - run: ls -al prebuilds/linux-armv7l
      - name: Compress builds
        run: |
          mkdir -p ref/tags
          tar --create --verbose --file="$(git describe --tags)-linux-armv7l.tar" --directory "prebuilds/linux-armv7l" ref/tags
      - name: Upload armv7l build
        id: upload-armv7l
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ github.ref }}-linux-armv7l.tar 
          asset_name: ${{ github.ref }}-linux-armv7l.tar
